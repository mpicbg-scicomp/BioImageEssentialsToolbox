package de.mpicbg.scf.fijiplugins.ui.labelmap;

import ij.IJ;
import ij.ImagePlus;
import ij.plugin.filter.PlugInFilter;
import ij.process.ImageProcessor;
import ij.process.ImageStatistics;
import net.imglib2.img.ImagePlusAdapter;
import net.imglib2.img.Img;
import net.imglib2.type.numeric.real.FloatType;
import de.mpicbg.scf.imgtools.image.create.labelmap.WatershedLabeling;
import de.mpicbg.scf.imgtools.ui.DebugHelper;
import de.mpicbg.scf.imgtools.ui.ImageJUtilities;
import fiji.util.gui.GenericDialogPlus;

import java.io.IOException;

/**
 * This plugin allows the user to use the watershed in our package directly. He defines two images:
 * * The image to segment. Hint: this should be a smoothed image.
 * * Another image showing dots where there are local maxima in the first image. This image may be generated by AreaMaxima or HMAxima for example.
 * 
 * The watershed leads to a labelMap which is shown after this plugin finished.
 *
 *
 * Author: Robert Haase, Scientific Computing Facility, MPI-CBG Dresden,
 * rhaase@mpi-cbg.de
 * Date: August 2015
 *
 * <p>
 * Copyright 2017 Max Planck Institute of Molecular Cell Biology and Genetics,
 * Dresden, Germany
 * <p>
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
public class WatershedLabelingPlugin implements PlugInFilter{

	@Override
	public int setup(String arg, ImagePlus imp) {
		return DOES_8G + DOES_16 + DOES_32;
	}

	@Override
	public void run(ImageProcessor ip) {
		DebugHelper.print(this, "Initialising.");
		
		//Configuration
		GenericDialogPlus gdp = new GenericDialogPlus("Watershed");
		gdp.addImageChoice("Image_to_segment", "");
		gdp.addImageChoice("Image_with_seed_points", "");
		gdp.addCheckbox("Use_threshold", false);
		gdp.addNumericField("Threshold (Grey value)", 10, 2);
		gdp.showDialog();
		if (gdp.wasCanceled())
		{
			return;
		}
		ImagePlus imp = gdp.getNextImage();
		ImagePlus seedImp = gdp.getNextImage();
		boolean applyThreshold = gdp.getNextBoolean();
		double threshold = gdp.getNextNumber();
		
		//Application of the watershed.
		int[] dims = imp.getDimensions();

		DebugHelper.print(this, "Converting.");
		Img<FloatType> img = ImagePlusAdapter.convertFloat(imp);
		Img<FloatType> seedImg = ImagePlusAdapter.convertFloat(seedImp).copy();

		DebugHelper.print(this, "Run actual watershed.");

		Img<FloatType> segmentedByWatershed = null;
		if (applyThreshold)
		{
			segmentedByWatershed = WatershedLabeling.watershed(img, seedImg, (float) threshold);
		}
		else
		{
			segmentedByWatershed = WatershedLabeling.watershed(img, seedImg);
		}
		//image back-conversion to visualise it in ImageJ
		ImageJUtilities.showLabelMapProperly(segmentedByWatershed, "Label map from watershed", dims, imp.getCalibration());

		/*
		ImagePlus imp2 = IJ.getImage();
		DebugHelper.print(this, "min disp " + imp2.getDisplayRangeMin());
		DebugHelper.print(this, "max disp " + imp2.getDisplayRangeMax());
		imp2.setDisplayRange(0, Float.MAX_VALUE);
		DebugHelper.print(this, "min disp " + imp2.getDisplayRangeMin());
		DebugHelper.print(this, "max disp " + imp2.getDisplayRangeMax());
		*/
		/*if (imp.getNSlices() == 1) {
			ImageStatistics stats = imp.getStatistics();

		}*/

		DebugHelper.print(this, "Bye.");
	}

	/**
	 * For testing and development
	 *
	 * @param args
	 * @throws IOException
	 */
	public static void main(final String... args) throws IOException {

		ImagePlus signalMap = IJ.openImage("src/test/resources/blobs.tif");
		signalMap.show();
		ImagePlus labelMap = IJ.openImage("src/test/resources/blobs_labelmap.tif");
		labelMap.show();
		new WatershedLabelingPlugin().run(null);



	}
}
